package org.schema.game.common.controller.database.tables;

import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import org.schema.game.common.data.fleet.Fleet;
import org.schema.game.common.data.fleet.FleetMember;
import org.schema.game.network.objects.remote.FleetCommand;
import org.schema.schine.network.StateInterface;

import java.io.IOException;
import java.sql.*;
import java.util.List;
import java.util.Locale;

public class FleetTable extends Table {
	public FleetTable(TableManager m, Connection c) {
		super("FLEETS", m, c);
	}

	@Override
	public void define() {

		addColumn("ID", "BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1)", true);
		addColumn("FLAGSHIP_ID", "BIGINT not null");
		addColumn("PARENT_FLEET", "BIGINT DEFAULT -1");
		addColumn("NAME", "VARCHAR(128)");
		addColumn("OWNER", "VARCHAR(128)");
		addColumn("MISSION_STRING", "VARCHAR(1024)");
		addColumn("COMMAND", "VARBINARY(1024)");
		addColumn("FACTION_ACCESS", "TINYINT DEFAULT 0"); //1 if true; TODO extend to use rank codes?
		addColumn("SAVED_REMOTES", "VARBINARY(1024)");
		addColumn("COMBAT_SETTING", "VARCHAR(128)");
		addColumn("COMBINED_TARGETING", "BOOLEAN DEFAULT FALSE");

		addIndex("fin", "FLAGSHIP_ID");
		addIndex("oin", "OWNER");
		addIndex("finp", "PARENT_FLEET");
	}

	public void updateFleetCommand(long dbid, FleetCommand fleetCommand) throws SQLException {
		Statement s = c.createStatement();
		PreparedStatement p = s.getConnection().prepareStatement(
				"UPDATE FLEETS SET (COMMAND) = (" +
						"CAST(? AS VARBINARY(1024))" +
						") WHERE ID = CAST(? AS BIGINT);");
		byte[] commandBytes = null;
		try {
			commandBytes = fleetCommand.serializeBytes();
		} catch(IOException e) {
			e.printStackTrace();
		}
		if(commandBytes != null) {
			p.setBytes(1, commandBytes);
		} else {
			p.setNull(1, Types.VARBINARY);
		}
		p.setLong(2, dbid);
		p.executeUpdate();
		p.close();
	}

	public void updateFleetFactionPermission(long dbid, byte val) throws SQLException {
		Statement s = c.createStatement();
		PreparedStatement p = s.getConnection().prepareStatement(
				"UPDATE FLEETS SET (FACTION_ACCESS) = (" +
						"CAST(? AS TINYINT)" +
						") WHERE ID = CAST(? AS BIGINT);");

		p.setByte(1, val);
		p.setLong(2, dbid);
		p.executeUpdate();
		p.close();
	}

	public void removeFleetCompletely(Fleet fleet) {
		removeFleetCompletely(fleet.dbid);
	}

	public void removeFleetCompletely(long fleet) {
		Statement s;
		try {
			s = c.createStatement();

			s.executeUpdate("DELETE FROM FLEET_MEMBERS WHERE FLEET_ID = " + fleet + ";");
			s.executeUpdate("DELETE FROM FLEETS WHERE ID = " + fleet + ";");

			s.close();

		} catch(SQLException e) {
			e.printStackTrace();
		}

	}

	public List<Fleet> loadFleetByOwner(StateInterface state, String owner) {
		List<Fleet> r = new ObjectArrayList<Fleet>();
		Statement s;
		try {
			s = c.createStatement();

			ResultSet q = s.executeQuery("SELECT ID FROM FLEETS WHERE OWNER = '" + owner.toLowerCase(Locale.ENGLISH) + "';");

			while(q.next()) {
				long fleetId = q.getLong(1);
				r.add(loadFleetById(state, fleetId));
			}

			s.close();

		} catch(SQLException e) {
			e.printStackTrace();
		}

		return r;
	}

	public Fleet loadFleetByAnyEntityId(StateInterface state, long dbId) {

		Statement s;
		try {
			s = c.createStatement();

			ResultSet q = s.executeQuery("SELECT FLEET_ID FROM FLEET_MEMBERS WHERE ENTITY_ID = " + dbId + ";");

			while(q.next()) {
				long fleetId = q.getLong(1);
				return loadFleetById(state, fleetId);
			}

			s.close();

		} catch(SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	public void updateOrInsertFleet(Fleet fleet) throws SQLException {
		Statement s = c.createStatement();
		ResultSet query = s.executeQuery("SELECT ID FROM FLEETS WHERE ID = " + fleet.dbid + ";");
		if(query.next()) {

			PreparedStatement p = s.getConnection().prepareStatement(
					"UPDATE FLEETS SET (FLAGSHIP_ID, PARENT_FLEET, NAME, OWNER, MISSION_STRING, COMMAND, FACTION_ACCESS, SAVED_REMOTES, COMBAT_SETTING, COMBINED_TARGETING) = (" +
							"CAST(? AS BIGINT)," +
							"CAST(? AS BIGINT)," +
							"CAST(? AS VARCHAR(128))," +
							"CAST(? AS VARCHAR(128))," +
							"CAST(? AS VARCHAR(1024))," +
							"CAST(? AS VARBINARY(1024))," +
							"CAST(? AS TINYINT)," +
							"CAST(? AS VARBINARY(1024))," +
							"CAST(? AS VARCHAR(128))," +
							"CAST(? AS BOOLEAN)" +
							") WHERE ID = CAST(? AS BIGINT)" + ";");
			p.setLong(1, fleet.getMembers().isEmpty() ? -1L : fleet.getFlagShip().entityDbId);
			p.setLong(2, fleet.parentFleet);
			p.setString(3, fleet.getName());
			p.setString(4, fleet.getOwner().toLowerCase(Locale.ENGLISH));
			p.setString(5, fleet.missionString);

			byte[] commandBytes = null;
			try {
				commandBytes = fleet.getCurrentCommandBytes();
			} catch(IOException e) {
				e.printStackTrace();
			}
			if(commandBytes != null) {
				p.setBytes(6, commandBytes);
			} else {
				p.setNull(6, Types.VARBINARY);
			}
			p.setByte(7, fleet.getFactionAccess());
			p.setBytes(8, fleet.serializeRemotes());
			p.setString(9, fleet.getCombatSetting());
			p.setBoolean(10, fleet.isCombinedTargeting());
			p.setLong(11, fleet.dbid);
			p.executeUpdate();
			p.close();

		} else {
			PreparedStatement p = s.getConnection().prepareStatement(
					"INSERT INTO FLEETS(FLAGSHIP_ID, PARENT_FLEET, NAME, OWNER, MISSION_STRING, COMMAND, FACTION_ACCESS, SAVED_REMOTES, COMBAT_SETTING) VALUES(" +
							"CAST(? AS BIGINT)," +
							"CAST(? AS BIGINT)," +
							"CAST(? AS VARCHAR(128))," +
							"CAST(? AS VARCHAR(128))," +
							"CAST(? AS VARCHAR(1024))," +
							"CAST(? AS VARBINARY(1024))," +
							"CAST(? AS TINYINT)," +
							"CAST(? AS VARBINARY(1024))," +
							"CAST(? AS VARCHAR(128))," +
							"CAST(? AS BOOLEAN)" +
							");", Statement.RETURN_GENERATED_KEYS);
			p.setLong(1, fleet.getMembers().isEmpty() ? -1L : fleet.getFlagShip().entityDbId);
			p.setLong(2, fleet.parentFleet);
			p.setString(3, fleet.getName());
			p.setString(4, fleet.getOwner().toLowerCase(Locale.ENGLISH));
			p.setString(5, fleet.missionString);
			byte[] commandBytes = null;
			try {
				commandBytes = fleet.getCurrentCommandBytes();
			} catch(IOException e) {
				e.printStackTrace();
			}
			if(commandBytes != null) {
				p.setBytes(6, commandBytes);
			} else {
				p.setNull(6, Types.VARBINARY);
			}
			p.setByte(7, fleet.getFactionAccess());
			p.setBytes(8, fleet.serializeRemotes());
			p.setString(9, fleet.getCombatSetting());
			p.setBoolean(10, fleet.isCombinedTargeting());
			p.executeUpdate();
			ResultSet generatedKeys = p.getGeneratedKeys();
			generatedKeys.next();
			long id = generatedKeys.getLong(1);

			fleet.dbid = id;

			p.close();
		}
		s.close();

		for(int i = 0; i < fleet.getMembers().size(); i++) {
			FleetMember m = fleet.getMembers().get(i);
			this.m.getFleetMemberTable().updateOrInsertFleetMember(fleet, m, i);
		}
	}

	public Fleet loadFleetById(StateInterface state, long fleetId) {
		Statement s;
		try {
			s = c.createStatement();

			ResultSet q = s.executeQuery("SELECT ID, FLAGSHIP_ID, PARENT_FLEET, NAME, OWNER, MISSION_STRING, COMMAND, FACTION_ACCESS, SAVED_REMOTES, COMBAT_SETTING, COMBINED_TARGETING FROM FLEETS WHERE ID = " + fleetId + ";");

			if(q.next()) {
				Fleet f = new Fleet(state);

				f.dbid = q.getLong(1);
				assert (f.dbid == fleetId);
				long flagShipId = q.getLong(2);
				f.parentFleet = q.getLong(3);
				f.setName(q.getString(4));
				f.setOwner(q.getString(5));
				f.missionString = (q.getString(6));
				f.setCurrentCommand(q.getBytes(7));
				byte factionAccess = q.getByte(8);
				f.setFactionAccessible(factionAccess);
				f.deserializeRemotes(q.getBytes(9));
				f.setCombatSetting(q.getString(10));
				f.setCombinedTargeting(q.getBoolean(11));
				m.getFleetMemberTable().loadFleetMembersFor(f);

				return f;
			}

			s.close();

		} catch(SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Deprecated
	public void createFleetsTable() throws SQLException {
		{
			Statement s = c.createStatement();

			s.execute("DROP TABLE FLEETS if exists;");

			s.execute("CREATE CACHED TABLE FLEETS(" +
					"BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " +
					"FLAGSHIP_ID BIGINT not null, " +
					"PARENT_FLEET BIGINT DEFAULT -1, " + //for future use of having subfleets
					"NAME VARCHAR(128), " +
					"OWNER VARCHAR(128), " +
					"MISSION_STRING VARCHAR(1024), " +
					"COMMAND VARBINARY(1024), " +
					"FACTION_ACCESS TINYINT DEFAULT 0, " +
					"SAVED_REMOTES VARBINARY(1024), " +
					"COMBAT_SETTING VARCHAR(128)," +
					"COMBINED_TARGETING BOOLEAN DEFAULT FALSE, " +
					"primary key (ID)" +
					");");

			//a ship can only be flagship for exactly one fleet but can also be -1 if not set
			s.execute("create index fin on FLEETS(FLAGSHIP_ID);");
			s.execute("create index oin on FLEETS(OWNER);");
			s.execute("create index finp on FLEETS(PARENT_FLEET);");
			s.close();
		}
	}

	@Override
	public void afterCreation(Statement s) throws SQLException {

	}

	@Override
	public void migrate(Statement s) throws SQLException {
		super.migrate(s);
		ResultSet r = s.executeQuery("SELECT DATA_TYPE " +
				"FROM information_schema.COLUMNS " +
				"WHERE " +
				"TABLE_NAME = '" + table + "' " +
				"AND COLUMN_NAME = 'COMMAND'");
		if(r.next()) {
			String val = r.getString(1);
			if("varchar".equals(val.toLowerCase(Locale.ENGLISH)) || val.toLowerCase(Locale.ENGLISH).equals("CHARACTER VARYING".toLowerCase(Locale.ENGLISH))) {
				s.executeUpdate("ALTER TABLE '" + table + "' ALTER COLUMN 'COMMAND' SET DATA TYPE VARBINARY(1024)");
			}

			///INSERTED CODE (Ithirahad)
			DatabaseMetaData meta = c.getMetaData();
			ResultSet factionAccessColumnCheck = meta.getColumns(null, null, table, "FACTION_ACCESS");
			if(!factionAccessColumnCheck.next()) { //if there's nothing in this resultset, column is not made yet
				System.err.println("[FLEETABLE][MIGRATION] No faction access column; updating DB table");
				s.executeUpdate("ALTER TABLE '" + table + "' ADD FACTION_ACCESS TINYINT DEFAULT 0");
			}
			///
			ResultSet savedRemotesColumnCheck = meta.getColumns(null, null, table, "SAVED_REMOTES");
			if(!savedRemotesColumnCheck.next()) { //if there's nothing in this resultset, column is not made yet
				System.err.println("[FLEETABLE][MIGRATION] No saved remotes column; updating DB table");
				s.executeUpdate("ALTER TABLE '" + table + "' ADD SAVED_REMOTES VARBINARY(1024)");
			}
			ResultSet combatSettingColumnCheck = meta.getColumns(null, null, table, "COMBAT_SETTING");
			if(!combatSettingColumnCheck.next()) { //if there's nothing in this resultset, column is not made yet
				System.err.println("[FLEETABLE][MIGRATION] No combat setting column; updating DB table");
				s.executeUpdate("ALTER TABLE '" + table + "' ADD COMBAT_SETTING VARCHAR(128)");
			}

			ResultSet combinedTargetingColumnCheck = meta.getColumns(null, null, table, "COMBINED_TARGETING");
			if(!combinedTargetingColumnCheck.next()) { //if there's nothing in this resultset, column is not made yet
				System.err.println("[FLEETABLE][MIGRATION] No combined targeting column; updating DB table");
				s.executeUpdate("ALTER TABLE '" + table + "' ADD COMBINED_TARGETING BOOLEAN DEFAULT FALSE");
			}

			System.err.println("[FLEETABLE] Migration check: " + val);
		}
//		r = s.executeQuery("SELECT DATA_TYPE " + 
//				"FROM information_schema.COLUMNS " +
//				"WHERE " +
//				"TABLE_NAME = '"+table+"' " +
//				"AND COLUMN_NAME = 'COMMAND'");
//		r.next();
//		assert(false):val.toLowerCase(Locale.ENGLISH).equals("varchar")+"; "+val+"; "+r.getString(1);
	}
}
