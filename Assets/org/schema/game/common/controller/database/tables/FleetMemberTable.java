package org.schema.game.common.controller.database.tables;

import org.schema.game.common.data.fleet.Fleet;
import org.schema.game.common.data.fleet.FleetMember;

import java.sql.*;
import java.util.Collections;

public class FleetMemberTable extends Table {
	public FleetMemberTable(TableManager m, Connection c) {
		super("FLEET_MEMBERS", m, c);
	}

	@Override
	public void define() {

		addColumn("ID", "BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1)", true);
		addColumn("FLEET_ID", "BIGINT not null");
		addColumn("ENTITY_ID", "BIGINT not null");
		addColumn("MISSION_STRING", "VARCHAR(1024)");
		addColumn("LIST_INDEX", "INT not null");
		addColumn("DOCKED_TO", "BIGINT not null");
		addColumn("FACTION", "INT default 0 not null");

		addIndex("ffid", "FLEET_ID");
		addIndex("eid", true, "ENTITY_ID");
		addIndex("ffeid", true, "FLEET_ID", "ENTITY_ID");

	}

	public void updateOrInsertFleetMember(Fleet fleet, FleetMember m, int listIndex) throws SQLException {
		Statement s = c.createStatement();
		ResultSet query = s.executeQuery("SELECT ID FROM FLEET_MEMBERS WHERE ENTITY_ID = " + m.entityDbId + ";");
		if(query.next()) {
			long dbId = query.getLong(1);
			PreparedStatement p = s.getConnection().prepareStatement(
					"UPDATE FLEET_MEMBERS SET (FLEET_ID, ENTITY_ID, MISSION_STRING, LIST_INDEX, DOCKED_TO, FACTION) = (" +
							"CAST(? AS BIGINT)," +
							"CAST(? AS BIGINT)," +
							"CAST(? AS VARCHAR(1024))," +
							"CAST(? AS INT)," +
							"CAST(? AS BIGINT)," +
							"CAST(? AS INT)" +
							") WHERE ID = CAST(? AS BIGINT)" + ";");
			p.setLong(1, fleet.dbid);
			p.setLong(2, m.entityDbId);
			p.setString(3, m.command);
			p.setInt(4, listIndex);
			p.setLong(5, m.getDockedToRootDbId());
			p.setInt(6, m.getFactionId());
			p.setLong(7, dbId);
			p.executeUpdate();
			p.close();

		} else {
			PreparedStatement p = s.getConnection().prepareStatement(
					"INSERT INTO FLEET_MEMBERS(FLEET_ID, ENTITY_ID, MISSION_STRING, LIST_INDEX, DOCKED_TO, FACTION) VALUES(" +
							"CAST(? AS BIGINT)," +
							"CAST(? AS BIGINT)," +
							"CAST(? AS VARCHAR(1024))," +
							"CAST(? AS INT)," +
							"CAST(? AS BIGINT)," +
							"CAST(? AS INT)" +
							");", Statement.RETURN_GENERATED_KEYS);
			p.setLong(1, fleet.dbid);
			p.setLong(2, m.entityDbId);
			p.setString(3, m.command);
			p.setInt(4, listIndex);
			p.setLong(5, m.getDockedToRootDbId());
			p.setInt(6, m.getFactionId());
			p.executeUpdate();
			ResultSet generatedKeys = p.getGeneratedKeys();
			generatedKeys.next();
			long id = generatedKeys.getLong(1);

			p.close();
		}
		s.close();
	}

	public void updateFleetMemberOnUnload(FleetMember m) {
		Statement s;
		try {
			s = c.createStatement();
			PreparedStatement p = s.getConnection().prepareStatement(
					"UPDATE FLEET_MEMBERS SET (DOCKED_TO, FACTION) = (" +
							"CAST(? AS BIGINT)," +
							"CAST(? AS INT)" +
							") WHERE ENTITY_ID = CAST(? AS BIGINT)" + ";");
			p.setLong(1, m.getDockedToRootDbId());
			p.setLong(2, m.getFactionId());
			p.setLong(3, m.entityDbId);
			p.executeUpdate();
			p.close();
			s.close();
		} catch(SQLException e) {
			e.printStackTrace();
		}
	}

	public void removeFleetMember(FleetMember m) {
		Statement s;
		try {
			s = c.createStatement();
			s.executeUpdate("DELETE FROM FLEET_MEMBERS WHERE ENTITY_ID = " + m.entityDbId + ";");
			s.close();

		} catch(SQLException e) {
			e.printStackTrace();
		}
	}

	void loadFleetMembersFor(Fleet f) {
		Statement s;
		try {
			s = c.createStatement();

			ResultSet q = s.executeQuery("SELECT ENTITY_ID, MISSION_STRING, LIST_INDEX, FACTION, DOCKED_TO FROM FLEET_MEMBERS WHERE FLEET_ID = " + f.dbid + ";");

			while(q.next()) {
				long entId = q.getLong(1);
				String missionString = q.getString(2);
				int listIndex = q.getInt(3);
				int faction = q.getInt(4);
				long dockedTo = q.getLong(5);
				FleetMember m = new FleetMember(f.getState());
				m.entityDbId = entId;
				m.command = missionString;
				m.tmpListIndex = listIndex;

				//DOCKED_TO didnt set right so retrive dock info from entities. can be removed on new worlds
				ResultSet dq = s.executeQuery("SELECT DOCKED_ROOT FROM ENTITIES WHERE ID = " + entId + ";");
				if(dq.next()) {
					m.setDockedToDbRootId(dq.getLong(1));
				}
				m.setFactionId(faction);

				this.m.getEntityTable().loadAndAddFleetMember(f, m);

			}
			Collections.sort(f.getMembers(), (o1, o2) -> o1.tmpListIndex - o2.tmpListIndex);
			s.close();

		} catch(SQLException e) {
			e.printStackTrace();
		}

	}

	@Deprecated
	public void createFleetsTable() throws SQLException {
		{
			Statement s = c.createStatement();

			s.execute("DROP TABLE FLEET_MEMBERS if exists;");

			s.execute("CREATE CACHED TABLE FLEET_MEMBERS(" +
					"BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " +
					"FLEET_ID BIGINT not null, " +
					"ENTITY_ID BIGINT not null, " + //for future use of having subfleets
					"MISSION_STRING VARCHAR(1024), " +
					"LIST_INDEX INT not null, " +
					"DOCKED_TO BIGINT not null, " +
					"FACTION INT default 0 not null, " +
					"primary key (ID)" +
					");");

			s.execute("ALTER TABLE FLEET_MEMBERS ADD CONSTRAINT ffkc FOREIGN KEY (FLEET_ID) references FLEETS(ID);");
			s.execute("ALTER TABLE FLEET_MEMBERS ADD CONSTRAINT efkc FOREIGN KEY (ENTITY_ID) references ENTITIES(ID);");

			s.execute("create index ffid on FLEET_MEMBERS(FLEET_ID);");
			s.execute("create unique index eid on FLEET_MEMBERS(ENTITY_ID);");
			s.execute("create unique index ffeid on FLEET_MEMBERS(FLEET_ID, ENTITY_ID);");
			s.close();
		}
	}

	@Override
	public void afterCreation(Statement s) throws SQLException {
		ResultSet r = s.executeQuery("SELECT * " +
				"FROM information_schema.REFERENTIAL_CONSTRAINTS");
//		while(r.next()) {
//			StringBuffer b = new StringBuffer();
//			DatabaseIndex.resultSetToStringBuffer(b, r);
//			System.err.println(b);
//		}

		r = s.executeQuery("SELECT * " +
				"FROM information_schema.REFERENTIAL_CONSTRAINTS  " +
				"WHERE " +
				"CONSTRAINT_NAME = 'FFKC'");
		if(!r.next()) {
			s.execute("ALTER TABLE " + table + " ADD CONSTRAINT FFKC FOREIGN KEY (FLEET_ID) references " + m.getFleetTable().table + "(ID);");
		}

		r = s.executeQuery("SELECT * " +
				"FROM information_schema.REFERENTIAL_CONSTRAINTS  " +
				"WHERE " +
				"CONSTRAINT_NAME = 'EFKC'");
//		r = s.executeQuery("SELECT * " + 
//				"FROM information_schema.TABLE_CONSTRAINTS " +
//				"WHERE " +
//				"TABLE_NAME = '"+table+"' " +
//				"AND CONSTRAINT_NAME = 'efkc'");
		if(!r.next()) {
			s.execute("ALTER TABLE " + table + " ADD CONSTRAINT EFKC FOREIGN KEY (ENTITY_ID) references " + m.getEntityTable().table + "(ID);");
		}
	}
}
