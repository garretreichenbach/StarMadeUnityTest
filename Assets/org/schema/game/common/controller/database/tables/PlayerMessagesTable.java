package org.schema.game.common.controller.database.tables;

import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import org.schema.game.common.controller.database.DatabaseIndex;
import org.schema.game.common.data.player.playermessage.PlayerMessage;

import java.sql.*;
import java.util.Locale;

public class PlayerMessagesTable extends Table {
	public PlayerMessagesTable(TableManager m, Connection c) {
		super("PLAYER_MESSAGES", m, c);
	}

	@Override
	public void define() {

		addColumn("ID", "BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1)", true);
		addColumn("SENDER", "VARCHAR(64) not null");
		addColumn("RECEIVER", "VARCHAR(64) not null");
		addColumn("TOPIC", "VARCHAR(128) not null");
		addColumn("MESSAGE", "VARCHAR(1024) not null");
		addColumn("SENT", "BIGINT not null");
		addColumn("READ", "BOOLEAN default false");
		addColumn("ATT_ID", "BIGINT");

		addIndex("i0", "SENDER");
		addIndex("i1", "RECEIVER");
		addIndex("i2", "SENT");
		addIndex("i3", "READ");
		addIndex("i4", "SENDER", "RECEIVER");
		addIndex("i5", "SENDER", "RECEIVER", "SENT");
	}

	public ObjectArrayList<PlayerMessage> loadPlayerMessages(String receiver, long fromDate, int limit) throws SQLException {

		ObjectArrayList<PlayerMessage> m = new ObjectArrayList<PlayerMessage>();
		Statement s = c.createStatement();
		String limitStr = "";
		if(limit > 0) {
			limitStr = "LIMIT " + limit;
		}

		String q = "SELECT SENDER, RECEIVER, TOPIC, MESSAGE, SENT, READ FROM PLAYER_MESSAGES WHERE RECEIVER = '" + DatabaseIndex.escape(receiver.toLowerCase(Locale.ENGLISH)) + "' AND SENT < " + fromDate + " ORDER BY SENT DESC " + limitStr + ";";
		ResultSet query = s.executeQuery(q);
		System.err.println("[DB] loading messages set from " + fromDate + " for receiver " + receiver + ": " + q);
		while(query.next()) {
			PlayerMessage msg = new PlayerMessage();
			msg.setFrom(query.getString(1));
			msg.setTo(query.getString(2));
			msg.setTopic(query.getString(3));
			msg.setMessage(query.getString(4).replaceAll("\\\\n", "\n").replaceAll("\\\\", ""));
			msg.setSent(query.getLong(5));
			msg.setRead(query.getBoolean(6));
			msg.setChangedForDb(false);
			m.add(msg);
		}

		return m;
	}

	public void deleteMessage(PlayerMessage pm) throws SQLException {

		Statement s = c.createStatement();
		ResultSet query = s.executeQuery("SELECT ID FROM PLAYER_MESSAGES WHERE SENDER = '" + pm.getFrom().toLowerCase(Locale.ENGLISH) + "' AND RECEIVER = '" + pm.getTo().toLowerCase(Locale.ENGLISH) + "' AND SENT = " + pm.getSent() + ";");

		if(query.next()) {
			long id = query.getLong(1);
			PreparedStatement p = c.prepareStatement(
					"DELETE FROM PLAYER_MESSAGES WHERE ID = CAST(? AS BIGINT);");

			p.setLong(1, id);
			p.executeUpdate();

			p.close();

		}
		s.close();
	}

	public void updateOrInsertMessage(PlayerMessage pm) throws SQLException {
		if(!pm.hasChangedForDb()) {

			//nothing needed here
			return;
		}
		Statement s = c.createStatement();

		ResultSet query = s.executeQuery("SELECT ID FROM PLAYER_MESSAGES WHERE SENDER = '" + DatabaseIndex.escape(pm.getFrom().toLowerCase(Locale.ENGLISH)) + "' AND RECEIVER = '" + DatabaseIndex.escape(pm.getTo().toLowerCase(Locale.ENGLISH)) + "' AND SENT = " + pm.getSent() + ";");

		if(query.next()) {
			long id = query.getLong(1);
			PreparedStatement p = c.prepareStatement(
					"UPDATE PLAYER_MESSAGES SET (SENDER, RECEIVER, TOPIC, MESSAGE, SENT, READ) = (" +
							"CAST(? AS VARCHAR(64))," +
							"CAST(? AS VARCHAR(64))," +
							"CAST(? AS VARCHAR(128))," +
							"CAST(? AS VARCHAR(1024))," +
							"CAST(? AS BIGINT)," +
							"CAST(? AS BOOLEAN)" +
							") WHERE ID = " + "CAST(? AS BIGINT)" + ";");
			p.setString(1, DatabaseIndex.escape(pm.getFrom().toLowerCase(Locale.ENGLISH)));
			p.setString(2, DatabaseIndex.escape(pm.getTo().toLowerCase(Locale.ENGLISH)));
			p.setString(3, DatabaseIndex.escape(pm.getTopic()));
			p.setString(4, DatabaseIndex.escape(pm.getMessage()));
			p.setLong(5, pm.getSent());
			p.setBoolean(6, pm.isRead());

			p.setLong(7, id);
			p.execute();

			p.close();

		} else {
			PreparedStatement p = c.prepareStatement(
					"INSERT INTO PLAYER_MESSAGES(SENDER, RECEIVER, TOPIC, MESSAGE, SENT, READ) VALUES(" +
							"CAST(? AS VARCHAR(64))," +
							"CAST(? AS VARCHAR(64))," +
							"CAST(? AS VARCHAR(128))," +
							"CAST(? AS VARCHAR(1024))," +
							"CAST(? AS BIGINT)," +
							"CAST(? AS BOOLEAN)" +
							");", Statement.RETURN_GENERATED_KEYS);
			p.setString(1, DatabaseIndex.escape(pm.getFrom().toLowerCase(Locale.ENGLISH)));
			p.setString(2, DatabaseIndex.escape(pm.getTo().toLowerCase(Locale.ENGLISH)));
			p.setString(3, DatabaseIndex.escape(pm.getTopic()));
			p.setString(4, DatabaseIndex.escape(pm.getMessage()));
			p.setLong(5, pm.getSent());
			p.setBoolean(6, pm.isRead());

			p.executeUpdate();
			ResultSet generatedKeys = p.getGeneratedKeys();
			generatedKeys.next();
			long id = generatedKeys.getLong(1);
			p.close();
		}
		s.close();

		pm.setChangedForDb(false);
	}

	@Deprecated
	public void createPlayerMessageTable() throws SQLException {
		{
			Statement s = c.createStatement();

			s.execute("DROP TABLE PLAYER_MESSAGES if exists;");

			s.execute("CREATE CACHED TABLE PLAYER_MESSAGES(" +
					"BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " +
					"SENDER VARCHAR(64) not null, " +
					"RECEIVER VARCHAR(64) not null, " +
					"TOPIC VARCHAR(128) not null, " +
					"MESSAGE VARCHAR(1024) not null, " +
					"SENT BIGINT not null, " +
					"READ BOOLEAN default false, " +
					"ATT_ID BIGINT, " +
					"primary key (ID)" +
					");");
			s.execute("create index i0 on PLAYER_MESSAGES(SENDER);");
			s.execute("create index i1 on PLAYER_MESSAGES(RECEIVER);");
			s.execute("create index i2 on PLAYER_MESSAGES(SENT);");
			s.execute("create index i3 on PLAYER_MESSAGES(READ);");
			s.execute("create index i4 on PLAYER_MESSAGES(SENDER, RECEIVER);");
			s.execute("create index i5 on PLAYER_MESSAGES(SENDER, RECEIVER, SENT);");

			s.close();
		}
	}

	@Override
	public void afterCreation(Statement s) {

	}
}
