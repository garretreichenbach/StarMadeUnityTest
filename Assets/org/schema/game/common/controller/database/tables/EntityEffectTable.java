package org.schema.game.common.controller.database.tables;

import org.schema.game.common.data.blockeffects.config.ConfigEntityManager;
import org.schema.game.common.data.blockeffects.config.ConfigGroup;

import java.sql.*;
import java.util.List;

public class EntityEffectTable extends Table {
	public EntityEffectTable(TableManager m, Connection c) {
		super("EFFECTS", m, c);
	}

	@Override
	public void define() {

		addColumn("ID", "BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1)", true);
		addColumn("ENTITY_ID", "BIGINT not null");
		addColumn("TYPE", "TINYINT not null");
		addColumn("EFFECT_UID", "VARCHAR(128)");

		addIndex("EFFECTS_PK", "ENTITY_ID");
		addIndex("EFFECTS_TYPE", "TYPE");
		addIndex("EFFECTS_UIDK", "EFFECT_UID");
		addIndex("EFFECTS_TYPE_ENT", "TYPE", "ENTITY_ID");
	}

	public void writeEffects(ConfigEntityManager configEntityManager, long entityId, ConfigEntityManager.EffectEntityType entityType) throws SQLException {
		Statement s = c.createStatement();
		s.execute("DELETE FROM EFFECTS WHERE TYPE = " + entityType.ordinal() + " AND ENTITY_ID = " + entityId + ";");
		List<ConfigGroup> active = configEntityManager.getPermanentEffects();
		if(active.size() > 0) {
			System.err.println("[DATABASE] " + configEntityManager + ": WRITING EFFECTS FOR " + configEntityManager.entityName + ": WRITING EFFECTS: " + active.size() + "; for " + entityType.name() + ", ID " + entityId);
		}
		for(ConfigGroup g : active) {
			PreparedStatement p = s.getConnection().prepareStatement(
					"INSERT INTO EFFECTS("
							+ "ENTITY_ID, "
							+ "TYPE, "
							+ "EFFECT_UID"
							+ ") VALUES(" +
							"CAST(? AS BIGINT)," +
							"CAST(? AS TINYINT)," +
							"CAST(? AS VARCHAR(128))" +
							");");
			p.setLong(1, entityId);
			p.setByte(2, (byte) entityType.ordinal());
			p.setString(3, g.id);
			p.executeUpdate();
			p.close();
		}
		s.close();
	}

	public void loadEffects(ConfigEntityManager configEntityManager, long entityId, ConfigEntityManager.EffectEntityType entityType) throws SQLException {
		Statement s = c.createStatement();
		ResultSet query = s.executeQuery("SELECT EFFECT_UID FROM EFFECTS WHERE TYPE = " + entityType.ordinal() + " AND ENTITY_ID = " + entityId + ";");
		final boolean permanent = true;
//		System.err.println("[DATABASE] "+configEntityManager+": LOADING EFFECTS FOR "+configEntityManager.entityName+": "+entityType.name()+", ID "+entityId);
		while(query.next()) {
			String uid = query.getString(1);
//			System.err.println("[DATABASE] "+configEntityManager+": LOADING EFFECT: "+uid);
			configEntityManager.addByID(uid, permanent);
		}
		s.close();
	}

	@Deprecated
	public void createEntityEffectTable() throws SQLException {
		Statement s = c.createStatement();
		s.execute("DROP TABLE EFFECTS if exists;");
		s.execute("CREATE CACHED TABLE EFFECTS(" +
				"ENTITY_ID BIGINT not null, " +
				"TYPE TINYINT not null, " +
				"EFFECT_UID VARCHAR(128) not null, " +
				"BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " +
				"primary key (ID)" +
				");");

		s.execute("create index EFFECTS_PK on EFFECTS (ENTITY_ID);");
		s.execute("create index EFFECTS_TYPE on EFFECTS (TYPE);");
		s.execute("create index EFFECTS_UIDK on EFFECTS (EFFECT_UID);");
		s.execute("create index EFFECTS_TYPE_ENT on EFFECTS (TYPE, ENTITY_ID);");
		s.close();
	}

	@Override
	public void afterCreation(Statement s) {

	}
}
