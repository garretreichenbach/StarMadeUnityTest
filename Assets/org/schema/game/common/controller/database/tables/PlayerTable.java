package org.schema.game.common.controller.database.tables;

import org.schema.game.common.controller.database.DatabaseEntry;
import org.schema.game.common.data.player.PlayerState;

import java.sql.*;
import java.util.Locale;

public class PlayerTable extends Table {
	public PlayerTable(TableManager m, Connection c) {
		super("PLAYERS", m, c);
	}

	@Override
	public void define() {

		addColumn("ID", "BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH " + Integer.MAX_VALUE + " INCREMENT BY 1)", true);
		addColumn("NAME", "VARCHAR(512) not null");
		addColumn("STARMADE_NAME", "VARCHAR(512) not null");
		addColumn("FACTION", "INT DEFAULT 0 not null");
		addColumn("PERMISSION", "BIGINT DEFAULT 0 not null");

		addIndex("PLAYERS_NAME", true, "NAME");
		addIndex("PLAYERS_SM_NAME", "STARMADE_NAME");
	}

	public void updateOrInsertPlayer(PlayerState player) throws SQLException {
		Statement s = null;
		try {
			s = c.createStatement();
			if(player.getDbId() < 0) {
				PreparedStatement p = s.getConnection().prepareStatement(
						"INSERT INTO PLAYERS(NAME, STARMADE_NAME, FACTION, PERMISSION) VALUES(" +
								"CAST(? AS VARCHAR(512))," +
								"CAST(? AS VARCHAR(512))," +
								"CAST(? AS INT)," +
								"CAST(? AS BIGINT)" +
								");", Statement.RETURN_GENERATED_KEYS);
				p.setString(1, player.getName().toLowerCase(Locale.ENGLISH));
				p.setString(2, player.getStarmadeName() == null ? "" : player.getStarmadeName());
				p.setInt(3, player.getFactionId());
				p.setLong(4, player.getFactionPermission());
				p.executeUpdate();
				ResultSet rSet = p.getGeneratedKeys();

				if(rSet.next()) {
					player.setDbId(rSet.getLong(1));
				}

				p.close();
			} else {

				PreparedStatement p = s.getConnection().prepareStatement(
						"UPDATE PLAYERS SET(NAME, STARMADE_NAME, FACTION, PERMISSION) = (" +
								"CAST(? AS VARCHAR(512))," +
								"CAST(? AS VARCHAR(512))," +
								"CAST(? AS INT)," +
								"CAST(? AS BIGINT)" +
								") WHERE ID = CAST(? AS BIGINT);");

				p.setString(1, player.getName().toLowerCase(Locale.ENGLISH));
				p.setString(2, player.getStarmadeName() == null ? "" : player.getStarmadeName());
				p.setInt(3, player.getFactionId());
				p.setLong(4, player.getFactionPermission());
				p.setLong(5, player.getDbId());
				p.executeUpdate();
				p.close();

			}

		} finally {
			if(s != null) {
				s.close();
			}
		}
	}

	public long getPlayerId(PlayerState playerState) throws SQLException {

		return getPlayerId(playerState.getName());
	}

	public void getPlayerFactionAndPermission(PlayerState playerState,
	                                          long[] offlinePermssion) throws SQLException {
		getPlayerFactionAndPermission(playerState.getName(), offlinePermssion);
	}

	public void getPlayerFactionAndPermission(String playerName,
	                                          long[] offlinePermssion) throws SQLException {
		String plNm = DatabaseEntry.removePrefixWOException(playerName.toLowerCase(Locale.ENGLISH));

		Statement s = null;
		try {
			s = c.createStatement();
			ResultSet q = s.executeQuery("SELECT FACTION, PERMISSION FROM PLAYERS WHERE NAME = '" + plNm + "';");

			if(q.next()) {
				offlinePermssion[0] = q.getInt(1);
				offlinePermssion[1] = q.getLong(2);
			}
		} finally {
			if(s != null) {
				s.close();
			}
		}
	}

	public long getPlayerId(String playerName) throws SQLException {

		String plNm = DatabaseEntry.removePrefixWOException(playerName.toLowerCase(Locale.ENGLISH));

		Statement s = null;
		try {
			s = c.createStatement();
			ResultSet q = s.executeQuery("SELECT ID FROM PLAYERS WHERE NAME = '" + plNm + "';");

			if(q.next()) {
				return q.getLong(1);
			}
		} finally {
			if(s != null) {
				s.close();
			}
		}
		return -1;
	}

	public String getPlayerName(long dbId) throws SQLException {

		Statement s = null;
		try {
			s = c.createStatement();
			ResultSet q = s.executeQuery("SELECT NAME FROM PLAYERS WHERE ID = '" + dbId + "';");

			if(q.next()) {
				return q.getString(1);
			}
		} finally {
			if(s != null) {
				s.close();
			}
		}
		return null;
	}

	@Deprecated
	public void createPlayersTable() throws SQLException {
		{
			Statement s = c.createStatement();

			s.execute("DROP TABLE PLAYERS if exists;");
			s.execute("CREATE CACHED TABLE PLAYERS(" +
					"BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH " + Integer.MAX_VALUE + " INCREMENT BY 1), " +
					"NAME VARCHAR(512) not null, " +
					"STARMADE_NAME VARCHAR(512) not null, " +
					"FACTION INT DEFAULT 0 not null, " +
					"PERMISSION BIGINT DEFAULT 0 not null, " +
					"primary key (ID)" +
					");");
			s.execute("create unique index PLAYERS_NAME on PLAYERS(NAME);");
			s.execute("create index PLAYERS_SM_NAME on PLAYERS(STARMADE_NAME);");

			s.close();
		}
	}

	@Override
	public void afterCreation(Statement s) {

	}
}
