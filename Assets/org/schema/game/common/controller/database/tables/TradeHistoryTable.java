package org.schema.game.common.controller.database.tables;

import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import org.schema.game.common.controller.trade.TradeHistoryElement;

import java.io.IOException;
import java.sql.*;
import java.util.List;

public class TradeHistoryTable extends Table {
	/*
	 * type (2)
	 * count (4)
	 * price (4)
	 * --------
	 * 10
	 */
	public static final int itemSize = 2048 * (2 + 4 + 4 + 4 + 4) * 2 + 4;

	public TradeHistoryTable(TableManager m, Connection c) {
		super("TRADE_HISTORY", m, c);
	}

	public static List<TradeHistoryElement> getTradeHistory(Statement s,
	                                                        String query) throws SQLException, IOException {
		List<TradeHistoryElement> tr = new ObjectArrayList<TradeHistoryElement>();
		ResultSet q = s.executeQuery("SELECT "
				+ "ID, "
				+ "FROM_ID, "
				+ "TO_ID, "
				+ "FROM_OWNER, "
				+ "TO_OWNER, "
				+ "FROM_FACTION_ID, "
				+ "TO_FACTION_ID, "
				+ "TOTAL_COST, "
				+ "DELIVERY_COST, "
				+ "SENT, "
				+ "RECEIVED, "
				+ "SUCCESS, "
				+ "VOLUME "
				+ "FROM TRADE_HISTORY WHERE " + query + ";");

		while(q.next()) {
			tr.add(getTradeHistoryFromResult(q));
		}
		return tr;
	}

	public static List<TradeHistoryElement> getTradeHistoryByFromId(Statement s,
	                                                                long fromId) throws SQLException, IOException {
		return getTradeHistory(s, "FROM_ID = " + fromId);
	}

	public static List<TradeHistoryElement> getTradeHistoryByToId(Statement s,
	                                                              long toId) throws SQLException, IOException {
		return getTradeHistory(s, "TO_ID = " + toId);
	}

	private static TradeHistoryElement getTradeHistoryFromResult(ResultSet q) throws SQLException {
		TradeHistoryElement t = new TradeHistoryElement();

		t.id = q.getLong(1);
		t.from = q.getLong(2);
		t.to = q.getLong(3);
		t.fromOwner = q.getString(4);
		t.toOwner = q.getString(5);
		t.fromFactionId = q.getInt(6);
		t.toFactionId = q.getInt(7);
		t.totalCost = q.getLong(8);
		t.deliveryCost = q.getLong(9);
		t.sent = q.getLong(10);
		t.received = q.getLong(11);
		t.success = q.getBoolean(12);
		t.volume = q.getDouble(13);
		return t;
	}

	public static TradeHistoryElement insertTradeHistory(Statement s,
	                                                     TradeHistoryElement t) throws SQLException, IOException {

		PreparedStatement p = s.getConnection().prepareStatement(
				"INSERT INTO TRADE_HISTORY("
						+ "FROM_ID, "
						+ "TO_ID, "
						+ "FROM_OWNER, "
						+ "TO_OWNER, "
						+ "FROM_FACTION_ID, "
						+ "TO_FACTION_ID, "
						+ "TOTAL_COST, "
						+ "DELIVERY_COST, "
						+ "SENT, "
						+ "RECEIVED, "
						+ "SUCCESS, "
						+ "VOLUME "
						+ ") VALUES(" +
						"CAST(? AS BIGINT)," +
						"CAST(? AS BIGINT)," +
						"CAST(? AS VARCHAR(128))," +
						"CAST(? AS VARCHAR(128))," +
						"CAST(? AS INT)," +
						"CAST(? AS INT)," +
						"CAST(? AS BIGINT)," +
						"CAST(? AS BIGINT)," +
						"CAST(? AS BIGINT)," +
						"CAST(? AS BIGINT)," +
						"CAST(? AS BOOLEAN)," +
						"CAST(? AS DOUBLE)" +
						");", Statement.RETURN_GENERATED_KEYS);
		p.setLong(1, t.from);
		p.setLong(2, t.to);
		p.setString(3, t.fromOwner);
		p.setString(4, t.toOwner);
		p.setInt(5, t.fromFactionId);
		p.setInt(6, t.toFactionId);
		p.setLong(7, t.totalCost);
		p.setLong(8, t.deliveryCost);
		p.setLong(9, t.sent);
		p.setLong(10, t.received);
		p.setBoolean(11, t.success);
		p.setDouble(12, t.volume);
		p.executeUpdate();
		ResultSet generatedKeys = p.getGeneratedKeys();
		generatedKeys.next();
		long id = generatedKeys.getLong(1);
		p.close();
		t.id = id;
		return t;
	}

	@Override
	public void define() {

		addColumn("ID", "BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1)", true);
		addColumn("FROM_ID", "BIGINT NOT NULL");
		addColumn("TO_ID", "BIGINT NOT NULL");
		addColumn("FROM_OWNER", "VARCHAR(128) NOT NULL");
		addColumn("TO_OWNER", "VARCHAR(128) not null");
		addColumn("FROM_FACTION_ID", "INT not null");
		addColumn("TO_FACTION_ID", "INT not null");
		addColumn("TOTAL_COST", "BIGINT NOT NULL");
		addColumn("DELIVERY_COST", "BIGINT not null");
		addColumn("SENT", "BIGINT not null");
		addColumn("RECEIVED", "BIGINT NOT NULL");
		addColumn("VOLUME", "DOUBLE NOT NULL");
		addColumn("SUCCESS", "BOOLEAN DEFAULT false not null");

		addIndex("frTr", "FROM_ID");
		addIndex("toTr", "TO_ID");
		addIndex("frFacTr", "FROM_FACTION_ID");
		addIndex("toFacTr", "TO_FACTION_ID");

		addIndex("fromIniTr", "FROM_OWNER");
		addIndex("toIniTr", "TO_OWNER");
		addIndex("timeConstT", "SENT");
		addIndex("timeConstEET", "RECEIVED");
		addIndex("sucCon", "SUCCESS");
	}

	public List<TradeHistoryElement> getTradeHistoryByFromId(long fromId) throws SQLException, IOException {
		Statement s = c.createStatement();

		List<TradeHistoryElement> trades = getTradeHistoryByFromId(s, fromId);

		s.close();

		return trades;
	}

	public List<TradeHistoryElement> getTradeHistoryByToId(long toId) throws SQLException, IOException {
		Statement s = c.createStatement();

		List<TradeHistoryElement> trades = getTradeHistoryByToId(s, toId);

		s.close();

		return trades;
	}

	@Deprecated
	public void createTradeTable() throws SQLException {
		Statement s = c.createStatement();

		s.execute("CREATE CACHED TABLE TRADE_HISTORY(" +
				"BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), " +
				"FROM_ID BIGINT not null, " +
				"TO_ID BIGINT not null, " +
				"FROM_OWNER VARCHAR(128) not null, " +
				"TO_OWNER VARCHAR(128) not null, " +
				"FROM_FACTION_ID INT not null, " +
				"TO_FACTION_ID INT not null, " +
				"TOTAL_COST BIGINT not null, " +
				"DELIVERY_COST BIGINT not null, " +
				"SENT BIGINT not null, " +
				"RECEIVED BIGINT not null, " +
				"VOLUME DOUBLE not null, " +
				"SUCCESS BOOLEAN DEFAULT false not null, " +
				"primary key (ID)" +
				");");

		s.execute("create index frTr on TRADE_HISTORY(FROM_ID);");
		s.execute("create index toTr on TRADE_HISTORY(TO_ID);");
		s.execute("create index frFacTr on TRADE_HISTORY(FROM_FACTION_ID);");
		s.execute("create index toFacTr on TRADE_HISTORY(TO_FACTION_ID);");

		s.execute("create index fromIniTr on TRADE_HISTORY(FROM_OWNER);");
		s.execute("create index toIniTr on TRADE_HISTORY(TO_OWNER);");
		s.execute("create index timeConstT on TRADE_HISTORY(SENT);");
		s.execute("create index timeConstEET on TRADE_HISTORY(RECEIVED);");
		s.execute("create index sucCon on TRADE_HISTORY(SUCCESS);");

		s.close();
	}

	@Override
	public void afterCreation(Statement s) {

	}
}
