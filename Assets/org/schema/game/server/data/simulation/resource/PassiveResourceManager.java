package org.schema.game.server.data.simulation.resource;

import api.utils.other.HashList;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import org.schema.common.util.linAlg.Vector3fTools;
import org.schema.common.util.linAlg.Vector3i;
import org.schema.game.common.data.world.StellarSystem;
import org.schema.game.server.data.GameServerState;
import org.schema.schine.resource.tag.FinishTag;
import org.schema.schine.resource.tag.Tag;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

/**
 * Manages PassiveResourceProviders and their saving and loading.
 * <br/>Will cull any sources that don't have any harvesters pulling from them. Culled sources will be automatically regenerated by the game
 * when the system itself is generated.
 *
 * @author Garret Reichenbach
 */
public class PassiveResourceManager {

	private static final File file = new File(GameServerState.DATABASE_PATH + "passive_resource_data.smdat");
	private static final HashList<Vector3i, PassiveResourceProvider> globalProviders = new HashList<>();
	private static final ArrayList<PassiveResourceProvider> emptyList = new ArrayList<>() {
		@Override
		public boolean add(PassiveResourceProvider passiveResourceProvider) {
			throw new RuntimeException("[PASSIVE RESOURCE SYSTEM] Illegal Operation: Attempted to add elements to \"no result\" passive resource provider dummy list.");
		}
	};

	public static void load() {
		if(!file.exists() || file.length() == 0) {
			System.out.println("No data to load for PassiveResourceManager");
			return;
		}
		globalProviders.clear();
		try {
			FileInputStream fileInputStream = new FileInputStream(file);
			Tag tag = Tag.readFrom(fileInputStream, true, false);
			Tag[] tags = tag.getStruct();
			for(Tag value : tags) {
				if(value != FinishTag.INST) continue;
				PassiveResourceProvider provider = new PassiveResourceProvider(value);
				globalProviders.add(provider.getLocation(), provider);
			}
			System.out.println("Loaded " + globalProviders.size() + " PassiveResourceProviders from database");
		} catch(IOException exception) {
			exception.printStackTrace();
			System.out.println("[SERVER][EXCEPTION] Failed to load passive resource providers due to IOException:\n" + exception.getMessage());
//			throw new RuntimeException("[PASSIVE RESOURCE SYSTEM] Failed to initialize PassiveResourceManager", exception);
		}
	}

	public static void save() {
		try {
			file.delete();
			file.createNewFile();
			ObjectArrayList<Tag> tagList = new ObjectArrayList<>();
			for(ArrayList<PassiveResourceProvider> provider : globalProviders.values()) {
				for(PassiveResourceProvider value : provider) tagList.add(value.toTagStructure());
			}
			Tag[] tags = new Tag[tagList.size() + 1];
			for(int i = 0; i < tags.length - 1; i++) tags[i] = tagList.get(i);
			tags[tags.length - 1] = FinishTag.INST;
			Tag tag = new Tag(Tag.Type.LIST, "PassiveResourceProvider", tags);
			FileOutputStream outputStream = new FileOutputStream(file);
			tag.writeTo(outputStream, false);
			outputStream.flush();
			outputStream.close();
			System.out.println("Saved " + globalProviders.size() + " PassiveResourceProviders to database");
		} catch(IOException exception) {
			exception.printStackTrace();
			System.out.println("[SERVER][EXCEPTION][FATAL]: Failed to save passive resource providers due to IOException:\n" + exception.getMessage());
			throw new RuntimeException("[PASSIVE RESOURCE SYSTEM] Failed to save PassiveResourceProvider", exception);
		}
	}

	public static void cull() throws IOException {
		ArrayList<PassiveResourceProvider> toRemove = new ArrayList<>();
		for(Vector3i sector : globalProviders.keySet()) {
			for(PassiveResourceProvider provider : globalProviders.get(sector)) {
				if(provider.getExtractors().isEmpty()) toRemove.add(provider);
			}
		}
		for(PassiveResourceProvider provider : toRemove) globalProviders.get(provider.getLocation()).remove(provider);
		save();
	}

	public static void addProvider(PassiveResourceProvider provider) {
		globalProviders.add(provider.getLocation(), provider);
		save();
	}

	public static void removeProvider(PassiveResourceProvider provider) {
		globalProviders.get(provider.getLocation()).remove(provider);
		save();
	}

	public static ArrayList<PassiveResourceProvider> getProvidersAt(Vector3i location) {
		return globalProviders.getOrDefault(location, emptyList);
	}

	/**
	 * Get all providers within a certain range of a location. Note: Will include providers within different systems if they are within range.
	 *
	 * @param location The sector to check from
	 * @param range    The range to check within
	 * @return A list of all providers within the range
	 */
	public static ArrayList<PassiveResourceProvider> getProvidersWithinRange(Vector3i location, float range) {
		ArrayList<PassiveResourceProvider> providers = new ArrayList<>();
		for(Vector3i sector : globalProviders.keySet()) {
			if(Vector3fTools.distance(sector, location) <= range) providers.addAll(globalProviders.get(sector));
		}
		return providers;
	}

	/**
	 * Get all providers within a specific system.
	 *
	 * @param system The system to check within (not sector!)
	 * @return A list of all providers within the system
	 */
	public static ArrayList<PassiveResourceProvider> getProvidersWithinSystem(Vector3i system) {
		ArrayList<PassiveResourceProvider> providers = new ArrayList<>();
		for(Vector3i sector : globalProviders.keySet()) {
			Vector3i systemPos = new Vector3i();
			StellarSystem.getPosFromSector(sector, systemPos);
			if(systemPos.equals(system)) providers.addAll(globalProviders.get(sector));
		}
		return providers;
	}

	public static HashList<Vector3i, PassiveResourceProvider> getGlobalMap() {
		return globalProviders;
	}
}
